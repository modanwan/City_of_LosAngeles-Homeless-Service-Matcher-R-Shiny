library(rvest)
library(rvest)
library(rvest)
library(rvest)
page1<-"http://www.nfl.com/stats/categorystats?tabSeq=0&statisticCategory=PASSING&conference=null&season=2017&seasonType=REG&d-447263-s=PASSING_YARDS&d-447263-o=2&d-447263-n=1"
page2<-"http://www.nfl.com/stats/categorystats?tabSeq=0&season=2017&seasonType=REG&d-447263-n=1&d-447263-o=2&d-447263-p=2&conference=null&statisticCategory=PASSING&d-447263-s=PASSING_YARDS"
page3<-"https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population"
#table
tbl1 <- page1%>%
read_html()%>%
html_nodes(xpath= '//*[@id="result"]')%>%
html_table()
tbl2 <- page2%>%
read_html()%>%
html_nodes(xpath= '//*[@id="result"]')%>%
html_table()
tbl1 <- tbl1[[1]]
tbl2 <- tbl2[[1]]
# combine the two dataframes
nfl_data=rbind(tbl1,tbl2)
library(dplyr)
library(ggplot2)
# get the top 15 player based on their rating(Rate)
top_15 <- nfl_data%>%
arrange(-Rate)%>%
slice(1:15)
# Create a dot plot that shows the name of the top palyers with their score
ggplot(top_15, aes(x=Rate, y = reorder(Player, Rate)))+
geom_point()
tbl3 <- page3%>%
read_html()%>%
html_nodes(xpath= '//*[@id="mw-content-text"]/div/table')%>%
html_table()
tbl3 <- tbl3[[1]]
sum(tbl3$Population)
str(tbl3)
# we got known that population is character with a " , "
# we need to change it to numeric and get rid of the comma first
# get rid of the comma
library(stringr)
tbl3$Population=str_replace_all(string=tbl3$Population,
pattern=",",
replacement = "")
tbl3$Population=as.numeric(tbl3$Population)
# find the sum of population
sum(tbl3$Population)
######lecture (2)
library(rvest)
part1="http://www.nfl.com/stats/categorystats?tabSeq=0&season=2017&seasonType=REG&d-447263-n=1&d-447263-o=2&statisticCategory=PASSING&conference=null&d-447263-p="
part2= "&d-447263-s=PASSING_YARDS"
# we have two pages,,develop for loop
#for(i in 1:10){
# print(i)
#}
#for(i in 1:10){
# print("DSO",i)
#}
# loop for different pages using loop
nfl_data=NULL
for(i in 1:2){
url=paste(part1,i,part2,sep="") ### paste creat the space, but we don't need it
#print(url) for testing
tbl1 <- url%>%
read_html()%>%
html_nodes(xpath= '//*[@id="result"]')%>%
html_table()
tbl1<-tbl1[[1]]
nfl_data=rbind(nfl_data,tbl1) ### store the tables
}
View(tbl1)
tbl1 <- page1%>%
read_html()%>%
html_nodes(xpath= '//*[@id="result"]')%>%
html_table()
tbl1 <- page1%>%
read_html()%>%
html_nodes(xpath= '//*[@id="result"]')%>%
html_table()
tbl1 <- page1%>%
read_html()%>%
html_nodes(xpath= '//*[@id="result"]')%>%
html_table()
#http://www.nfl.com/stats/player
library(rvest)
#page 1 :    http://www.nfl.com/stats/categorystats?tabSeq=0&season=2017&seasonType=REG&d-447263-n=1&d-447263-o=2&statisticCategory=PASSING&conference=null&d-447263-p=1&d-447263-s=PASSING_YARDS
#page 2 :   http://www.nfl.com/stats/categorystats?tabSeq=0&season=2017&seasonType=REG&d-447263-n=1&d-447263-o=2&conference=null&statisticCategory=PASSING&d-447263-p=2&d-447263-s=PASSING_YARDS
# we can also use page 1 link from 1 to 2
#http://www.nfl.com/stats/categorystats?tabSeq=0&season=2017&seasonType=REG&d-447263-n=1&d-447263-o=2&statisticCategory=PASSING&conference=null&d-447263-p=2&d-447263-s=PASSING_YARDS
page1<-"http://www.nfl.com/stats/categorystats?tabSeq=0&statisticCategory=PASSING&conference=null&season=2017&seasonType=REG&d-447263-s=PASSING_YARDS&d-447263-o=2&d-447263-n=1"
page2<-"http://www.nfl.com/stats/categorystats?tabSeq=0&season=2017&seasonType=REG&d-447263-n=1&d-447263-o=2&d-447263-p=2&conference=null&statisticCategory=PASSING&d-447263-s=PASSING_YARDS"
page3<-
tbl1 <- page1%>%
read_html()%>%
html_nodes(xpath= '//*[@id="result"]')%>%
html_table()
tbl2 <- page2%>%
read_html()%>%
html_nodes(xpath= '//*[@id="result"]')%>%
html_table()
tbl1 <- tbl1[[1]]
tbl2 <- tbl2[[1]]
View(tbl1)
nfl_data=rbind(tbl1,tbl2)
library(dplyr)
library(ggplot2)
View(nfl_data)
top_15 <- nfl_data%>%
arrange(-Rate)%>%
slice(1:15)
# Create a dot plot that shows the name of the top palyers with their score
ggplot(top_15, aes(x=Rate, y = reorder(Player, Rate)))+
geom_point()
page3<-"https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population"
tbl3 <- page3%>%
read_html()%>%
html_nodes(xpath= '//*[@id="mw-content-text"]/div/table')%>%
html_table()
tbl3 <- tbl3[[1]]
sum(tbl3$Population)
str(tbl3)
library(stringr)
View(tbl3)
tbl3$Population=str_replace_all(string=tbl3$Population,
pattern=",",
replacement = "")
tbl3$Population=as.numeric(tbl3$Population)
library(rvest)
part1="http://www.nfl.com/stats/categorystats?tabSeq=0&season=2017&seasonType=REG&d-447263-n=1&d-447263-o=2&statisticCategory=PASSING&conference=null&d-447263-p="
part2= "&d-447263-s=PASSING_YARDS"
nfl_data=NULL
nfl_data=NULL
for(i in 1:2){
url=paste(part1,i,part2,sep="") ### paste creat the space, but we don't need it
#print(url) for testing
tbl1 <- url%>%
read_html()%>%
html_nodes(xpath= '//*[@id="result"]')%>%
html_table()
tbl1<-tbl1[[1]]
nfl_data=rbind(nfl_data,tbl1) ### store the tables
}
#http://www.nfl.com/stats/player
library(rvest)
#page 1 :    http://www.nfl.com/stats/categorystats?tabSeq=0&season=2017&seasonType=REG&d-447263-n=1&d-447263-o=2&statisticCategory=PASSING&conference=null&d-447263-p=1&d-447263-s=PASSING_YARDS
#page 2 :   http://www.nfl.com/stats/categorystats?tabSeq=0&season=2017&seasonType=REG&d-447263-n=1&d-447263-o=2&conference=null&statisticCategory=PASSING&d-447263-p=2&d-447263-s=PASSING_YARDS
# we can also use page 1 link from 1 to 2
#http://www.nfl.com/stats/categorystats?tabSeq=0&season=2017&seasonType=REG&d-447263-n=1&d-447263-o=2&statisticCategory=PASSING&conference=null&d-447263-p=2&d-447263-s=PASSING_YARDS
page1<-"http://www.nfl.com/stats/categorystats?tabSeq=0&statisticCategory=PASSING&conference=null&season=2017&seasonType=REG&d-447263-s=PASSING_YARDS&d-447263-o=2&d-447263-n=1"
page2<-"http://www.nfl.com/stats/categorystats?tabSeq=0&season=2017&seasonType=REG&d-447263-n=1&d-447263-o=2&d-447263-p=2&conference=null&statisticCategory=PASSING&d-447263-s=PASSING_YARDS"
#table 1
tbl1 <- page1%>%
read_html()%>%
html_nodes(xpath= '//*[@id="result"]')%>%
html_table()
tbl2 <- page2%>%
read_html()%>%
html_nodes(xpath= '//*[@id="result"]')%>%
html_table()
tbl1 <- tbl1[[1]]
tbl2 <- tbl2[[1]]
# combine the two dataframes
nfl_data=rbind(tbl1,tbl2)
library(dplyr)
library(ggplot2)
# get the top 15 player based on their rating(Rate)
top_15 <- nfl_data%>%
arrange(-Rate)%>%
slice(1:15)
# Create a dot plot that shows the name of the top palyers with their score
ggplot(top_15, aes(x=Rate, y = reorder(Player, Rate)))+
geom_point()
page3<-"https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population"
tbl3 <- page3%>%
read_html()%>%
html_nodes(xpath= '//*[@id="mw-content-text"]/div/table')%>%
html_table()
tbl3 <- tbl3[[1]]
sum(tbl3$Population)
library(shiny); runApp('Desktop/Shinny /censusVis/data/Untitled.R')
library(shiny)
library(dplyr)
library(ggplot2)
library(lubridate)
runApp('Desktop/Shinny /censusVis/data/Untitled.R')
runApp('Desktop/Shinny /censusVis/data/Untitled.R')
runApp('Desktop/Shinny /censusVis/data/Untitled.R')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
data1 <- reactive({
data1=data%>%
filter(!is.na(VictimAge))%>%
filter(!is.na(VictimSex))%>%
filter(!VictimSex=="X")
data1$VictimSex=as.factor(data1$VictimSex)
levels(data1$VictimSex)=c("Female","Male")
data1
})
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
runApp('Desktop/Shinny /censusVis/data')
shiny::runApp('Desktop')
The area of a squre with lenght is $S=a^2$
require(mtcars)
require(mtcars)
load("~/enter to r.r")
fun=function(x){
print(x)
}
fun(3)
fun=function(x,y){
mean(x,y)
}
fun(3,5)
fun(3,5)
fun=function(x,y){
mean(x,y)
}
fun(3,5)
x=matrix(1:9,3,3)
x
x
apply(1,2,mean)
apply(1,2xmean)
apply(1,x,mean)
sqrt(x=4)
x
sqrt(x<-4)
x
prit_ex=function(x){
return x^2
}
prit_ex=function(x){
return (x^2)
}
prit_ex(2)
fabonacci=function(n){
f=rep(1,n)  ### repate 1 for n times
if(n==1){
return(f[1])
}else if(n==2){
return(f[2])
}else{
for ( i in 3:n){
f[i]=f[i-1]+f[i-2]
}
return (f[n])
}
}
fabonacci(8)
fabonacci(6)
fabonacci(1)
fabonacci(2)
f=rep(1,n)
f[2]
f=function(n){rep(1,n)}
f[2]
fabonacci_recursion=function(n){
if(n==1){
return(1)
}else if(n==2){
return(2)
}else{
return fabonacci_recursion(n-1)+fabonacci_recursion(n-2)
}
}
fabonacci_recursion=function(n){
if(n==1){
return(1)
}else if(n==2){
return(2)
}else{
return (fabonacci_recursion(n-1)+fabonacci_recursion(n-2))
}
}
fabonacci_recursion(6)
fabonacci_recursion(6)
fabonacci_recursion=function(n){
if(n==1){
return(1)
}else if(n==2){
return(1)
}else{
return (fabonacci_recursion(n-1)+fabonacci_recursion(n-2))
}
}
fabonacci_recursion(6)
x=rnorm(100)
y=rnorm(10)
z=rnorm(23)
l=list(x,y,z)
l
lapply(l,mean)
mean
a = c(1, 2, 3)
b = c(4, 5, 6)
a^b
c=c(1,2,3,4)
d=c(1,2)
c^d
a = 1 : 9
a = matrix(a, 3, 3)
print(a)
a=1:6
a=matrix(a,2,3)
a
b=1:4
b=matrix(b,2,3)
b
a[1,2]
a[3]
A=data.frame(a,b)
A
A=rbing(a,b)
A=rbind(a,b)
A
a=c(1,2,3)
b=c(4,5,6)
A=rbind(a,b)
A
A+3
train=1:200
Auto.train <- Auto[train, ]
Auto.test <- Auto[!train, ]
set.seed(1)
library(MASS)
library(ISLR)
attach(Auto)
train=1:200
Auto.train <- Auto[train, ]
Auto.test <- Auto[!train, ]
set.seed(1)
library(MASS)
lda.fit = lda(mpg01 ~ cylinders + weight +displacement +horsepower,data = Auto, subset = train)
lda.class=predict(lda.fit,Auto.test)$class
table(lda.class,Auto.test$mpg01)
attach(Auto)
train = 1:200
test = 201:392
Auto.train = Auto[train,]
Auto.test = Auto[test,]
mpg01.test = mpg01[test]
set.seed(1)
library(MASS)
lda.fit = lda(mpg01 ~ cylinders + weight +  displacement +horsepower, data = Auto, subset = train)
lda.pred = predict(lda.fit, Auto.test)
mean(lda.pred$class != mpg01.test)
attach(Auto)
train = 1:200
test = 201:392
Auto.train = Auto[train,]
Auto.test = Auto[test,]
mpg01.test = mpg01[test]
Auto$mpg01 <- ifelse(Auto$mpg > median(Auto$mpg),1,0)
train = 1:200
test = 201:392
Auto.train = Auto[train,]
Auto.test = Auto[test,]
mpg01.test = mpg01[test]
set.seed(1)
mpg01 = rep(0,length(mpg))
mpg01[mpg > median(mpg)]=1
Auto = data.frame(Auto,mpg01)
pairs(Auto[,-9])
pairs(Auto)
attach(Auto)
train = 1:200
test = 201:392
Auto.train = Auto[train,]
Auto.test = Auto[test,]
mpg01.test = mpg01[test]
set.seed(1)
library(MASS)
lda.fit = lda(mpg01 ~ cylinders + weight +  displacement +horsepower, data = Auto, subset = train)
lda.pred = predict(lda.fit, Auto.test)
mean(lda.pred$class != mpg01.test)
lda.pred = predict(lda.fit, Auto.test)
attach(Auto)
train = 1:200
Auto.train = Auto[train,]
Auto.test = Auto[!train,]
mpg01.test = mpg01[!train]
set.seed(1)
library(MASS)
lda.fit = lda(mpg01 ~ cylinders + weight +  displacement +horsepower, data = Auto, subset = train)
lda.pred = predict(lda.fit, Auto.test)
mean(lda.pred$class != mpg01.test)
attach(Auto)
Auto
data=Auto
attach(Auto)
train = 1:200
test=201:392
Auto.train = Auto[train,]
Auto.test = Auto[test,]
mpg01.test = mpg01[test]
set.seed(1)
library(MASS)
lda.fit = lda(mpg01 ~ cylinders + weight +  displacement +horsepower, data = Auto, subset = train)
lda.pred = predict(lda.fit, Auto.test)
mean(lda.pred$class != mpg01.test)
table(lda.pred$class, mpg01.test)
mean(lda.pred$class != mpg01.test)
fit.qda <- qda(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto, subset = train)
fit.qda
qda.pred = predict(qda.fit, Auto.test)
table(qda.pred$class, mpg01.test)
mean(qda.pred$class != mpg01.test)
qda.fit <- qda(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto, subset = train)
qda.fit
qda.pred = predict(qda.fit, Auto.test)
table(qda.pred$class, mpg01.test)
mean(qda.pred$class != mpg01.test)
glm.fit =glm(mpg01 ~ cylinders + weight +displacement +horsepower,data = Auto,family = binomial,subset = train)
glm.probs = predict(glm.fit,Auto.test, type = 'response')
glm.pred = rep(0,length(glm.probs))
glm.pred[glm.probs >0.5]=1
table(glm.pred$class, mpg01.test)
mean(glm.pred != mpg01.test)
table(glm.pred$class, mpg01.test)
table(glm.pred, mpg01.test)
mean(glm.pred != mpg01.test)
library(class)
train.X = cbind(cylinders,weight,displacement,horsepower)[train,]
test.X = cbind(cylinders,weight,displacement,horsepower)[test,]
train.mpg01 = mpg01[train]
set.seed(1)
knn.pred = knn(train.X,test.X,train.mpg01,k=1)
mean(knn.pred != mpg01.test)
table(pred.knn, mpg01.test)
mean(knn.pred != mpg01.test)
knn.pred = knn(train.X,test.X,train.mpg01,k=1)
table(knn.pred, mpg01.test)
mean(knn.pred != mpg01.test)
knn.pred = knn(train.X,test.X,train.mpg01,k=10)
table(knn.pred, mpg01.test)
mean(knn.pred != mpg01.test)
knn.pred = knn(train.X,test.X,train.mpg01,k=100)
table(knn.pred, mpg01.test)
mean(knn.pred != mpg01.test)
knn.pred = knn(train.X,test.X,train.mpg01,k=200)
table(knn.pred, mpg01.test)
mean(knn.pred != mpg01.test)
knn.pred = knn(train.X,test.X,train.mpg01,k=110)
table(knn.pred, mpg01.test)
mean(knn.pred != mpg01.test)
View(A)
library(shiny); runApp('Desktop/DSO-545-Final-Project-Group-14-master/project dashboard.R')
calls311.RData=load("calls311.RData")
crime.Rdata=load("crime.Rdata")
homeless_count.Rdata=load("homeless_count.Rdata")
setwd("~/Desktop/DSO-545-Final-Project-Group-14-master")
calls311.RData=load("calls311.RData")
crime.Rdata=load("crime.Rdata")
homeless_count.Rdata=load("homeless_count.Rdata")
View(A)
View(calls)
View(homeless_count)
View(crime)
View(calls)
runApp('project dashboard.R')
shape=readRDS(file="Census-Tracts")
shape
a
b
x
z
View(homeless_count)
View(fabonacci)
View(fabonacci)
View(f)
View(f)
View(fabonacci)
View(fabonacci)
View(fabonacci_recursion)
View(fabonacci_recursion)
View(fun)
View(fun)
View(prit_ex)
View(prit_ex)
View(fabonacci_recursion)
View(fabonacci_recursion)
View(fabonacci)
View(fabonacci)
View(f)
View(fabonacci)
View(fabonacci_recursion)
View(prit_ex)
View(homeless_count)
num_shelter
num_shelt
num_shelt
num_shelt
runApp('project dashboard.R')
runApp('project dashboard.R')
runApp('project dashboard.R')
runApp('project dashboard.R')
View(crime)
runApp('project dashboard.R')
runApp('project dashboard.R')
runApp('project dashboard.R')
